
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001fc6  0000205a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800080  00800080  0000207a  2**0
                  ALLOC
  3 .stab         000017a0  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000bca  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000043e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004526  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000062df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000071ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000080d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008365  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008b33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 38       	cpi	r26, 0x81	; 129
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <main>
      8a:	0c 94 e1 0f 	jmp	0x1fc2	; 0x1fc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_VidSendCommand>:

#include <util/delay.h>

static u8 CLCD_u8CharPointer =0;
void CLCD_VidSendCommand(u8 Copy_u8command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	62 97       	sbiw	r28, 0x12	; 18
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	88 8b       	std	Y+16, r24	; 0x10
	_delay_ms(2);
	/*Set Enable as LOW*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
#elif CLCD_MODE == CLCD_4BIT
	/*set RS as LOW to send commend*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*Set RW as LOW to write*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*Send your commend*/
	for(u8 Local_u8Iterator=0;Local_u8Iterator<2;Local_u8Iterator++)
     b70:	1f 86       	std	Y+15, r1	; 0x0f
     b72:	0a c1       	rjmp	.+532    	; 0xd88 <CLCD_VidSendCommand+0x242>
	{
		switch (Local_u8Iterator)
     b74:	8f 85       	ldd	r24, Y+15	; 0x0f
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	3a 8b       	std	Y+18, r19	; 0x12
     b7c:	29 8b       	std	Y+17, r18	; 0x11
     b7e:	89 89       	ldd	r24, Y+17	; 0x11
     b80:	9a 89       	ldd	r25, Y+18	; 0x12
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	39 f0       	breq	.+14     	; 0xb94 <CLCD_VidSendCommand+0x4e>
     b86:	29 89       	ldd	r18, Y+17	; 0x11
     b88:	3a 89       	ldd	r19, Y+18	; 0x12
     b8a:	21 30       	cpi	r18, 0x01	; 1
     b8c:	31 05       	cpc	r19, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <CLCD_VidSendCommand+0x4c>
     b90:	47 c0       	rjmp	.+142    	; 0xc20 <CLCD_VidSendCommand+0xda>
     b92:	7b c0       	rjmp	.+246    	; 0xc8a <CLCD_VidSendCommand+0x144>
		{
		case 0 :
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB7_PIN,((Copy_u8command &0b10000000)>>7));
     b94:	88 89       	ldd	r24, Y+16	; 0x10
     b96:	98 2f       	mov	r25, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	99 27       	eor	r25, r25
     b9c:	99 1f       	adc	r25, r25
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	67 e0       	ldi	r22, 0x07	; 7
     ba2:	49 2f       	mov	r20, r25
     ba4:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB6_PIN,((Copy_u8command &0b01000000)>>6));
     ba8:	88 89       	ldd	r24, Y+16	; 0x10
     baa:	88 2f       	mov	r24, r24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	80 74       	andi	r24, 0x40	; 64
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	08 2e       	mov	r0, r24
     bb4:	89 2f       	mov	r24, r25
     bb6:	00 0c       	add	r0, r0
     bb8:	88 1f       	adc	r24, r24
     bba:	99 0b       	sbc	r25, r25
     bbc:	00 0c       	add	r0, r0
     bbe:	88 1f       	adc	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	98 2f       	mov	r25, r24
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	66 e0       	ldi	r22, 0x06	; 6
     bc8:	49 2f       	mov	r20, r25
     bca:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB5_PIN,((Copy_u8command &0b00100000)>>5));
     bce:	88 89       	ldd	r24, Y+16	; 0x10
     bd0:	88 2f       	mov	r24, r24
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	80 72       	andi	r24, 0x20	; 32
     bd6:	90 70       	andi	r25, 0x00	; 0
     bd8:	95 95       	asr	r25
     bda:	87 95       	ror	r24
     bdc:	95 95       	asr	r25
     bde:	87 95       	ror	r24
     be0:	95 95       	asr	r25
     be2:	87 95       	ror	r24
     be4:	95 95       	asr	r25
     be6:	87 95       	ror	r24
     be8:	95 95       	asr	r25
     bea:	87 95       	ror	r24
     bec:	98 2f       	mov	r25, r24
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	65 e0       	ldi	r22, 0x05	; 5
     bf2:	49 2f       	mov	r20, r25
     bf4:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB4_PIN,((Copy_u8command &0b00010000)>>4));
     bf8:	88 89       	ldd	r24, Y+16	; 0x10
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	80 71       	andi	r24, 0x10	; 16
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	95 95       	asr	r25
     c04:	87 95       	ror	r24
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	95 95       	asr	r25
     c10:	87 95       	ror	r24
     c12:	98 2f       	mov	r25, r24
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	64 e0       	ldi	r22, 0x04	; 4
     c18:	49 2f       	mov	r20, r25
     c1a:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
     c1e:	35 c0       	rjmp	.+106    	; 0xc8a <CLCD_VidSendCommand+0x144>
			break;
		case 1 :
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB7_PIN,((Copy_u8command &0b00001000)>>3));
     c20:	88 89       	ldd	r24, Y+16	; 0x10
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	88 70       	andi	r24, 0x08	; 8
     c28:	90 70       	andi	r25, 0x00	; 0
     c2a:	95 95       	asr	r25
     c2c:	87 95       	ror	r24
     c2e:	95 95       	asr	r25
     c30:	87 95       	ror	r24
     c32:	95 95       	asr	r25
     c34:	87 95       	ror	r24
     c36:	98 2f       	mov	r25, r24
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	67 e0       	ldi	r22, 0x07	; 7
     c3c:	49 2f       	mov	r20, r25
     c3e:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB6_PIN,((Copy_u8command &0b00000100)>>2));
     c42:	88 89       	ldd	r24, Y+16	; 0x10
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	84 70       	andi	r24, 0x04	; 4
     c4a:	90 70       	andi	r25, 0x00	; 0
     c4c:	95 95       	asr	r25
     c4e:	87 95       	ror	r24
     c50:	95 95       	asr	r25
     c52:	87 95       	ror	r24
     c54:	98 2f       	mov	r25, r24
     c56:	83 e0       	ldi	r24, 0x03	; 3
     c58:	66 e0       	ldi	r22, 0x06	; 6
     c5a:	49 2f       	mov	r20, r25
     c5c:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB5_PIN,((Copy_u8command &0b00000010)>>1));
     c60:	88 89       	ldd	r24, Y+16	; 0x10
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	82 70       	andi	r24, 0x02	; 2
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	95 95       	asr	r25
     c6c:	87 95       	ror	r24
     c6e:	98 2f       	mov	r25, r24
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	65 e0       	ldi	r22, 0x05	; 5
     c74:	49 2f       	mov	r20, r25
     c76:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB4_PIN,(Copy_u8command &0b00000001));
     c7a:	88 89       	ldd	r24, Y+16	; 0x10
     c7c:	98 2f       	mov	r25, r24
     c7e:	91 70       	andi	r25, 0x01	; 1
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	64 e0       	ldi	r22, 0x04	; 4
     c84:	49 2f       	mov	r20, r25
     c86:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
			break;
		}
		/*Set Enable as HIGH*/
		DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,HIGH);
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	a0 e0       	ldi	r26, 0x00	; 0
     c9a:	b0 e4       	ldi	r27, 0x40	; 64
     c9c:	8b 87       	std	Y+11, r24	; 0x0b
     c9e:	9c 87       	std	Y+12, r25	; 0x0c
     ca0:	ad 87       	std	Y+13, r26	; 0x0d
     ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
     caa:	9e 85       	ldd	r25, Y+14	; 0x0e
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	4a ef       	ldi	r20, 0xFA	; 250
     cb2:	54 e4       	ldi	r21, 0x44	; 68
     cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb8:	dc 01       	movw	r26, r24
     cba:	cb 01       	movw	r24, r22
     cbc:	8f 83       	std	Y+7, r24	; 0x07
     cbe:	98 87       	std	Y+8, r25	; 0x08
     cc0:	a9 87       	std	Y+9, r26	; 0x09
     cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cc4:	6f 81       	ldd	r22, Y+7	; 0x07
     cc6:	78 85       	ldd	r23, Y+8	; 0x08
     cc8:	89 85       	ldd	r24, Y+9	; 0x09
     cca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e8       	ldi	r20, 0x80	; 128
     cd2:	5f e3       	ldi	r21, 0x3F	; 63
     cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd8:	88 23       	and	r24, r24
     cda:	2c f4       	brge	.+10     	; 0xce6 <CLCD_VidSendCommand+0x1a0>
		__ticks = 1;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	9e 83       	std	Y+6, r25	; 0x06
     ce2:	8d 83       	std	Y+5, r24	; 0x05
     ce4:	3f c0       	rjmp	.+126    	; 0xd64 <CLCD_VidSendCommand+0x21e>
	else if (__tmp > 65535)
     ce6:	6f 81       	ldd	r22, Y+7	; 0x07
     ce8:	78 85       	ldd	r23, Y+8	; 0x08
     cea:	89 85       	ldd	r24, Y+9	; 0x09
     cec:	9a 85       	ldd	r25, Y+10	; 0x0a
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	3f ef       	ldi	r19, 0xFF	; 255
     cf2:	4f e7       	ldi	r20, 0x7F	; 127
     cf4:	57 e4       	ldi	r21, 0x47	; 71
     cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cfa:	18 16       	cp	r1, r24
     cfc:	4c f5       	brge	.+82     	; 0xd50 <CLCD_VidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     d00:	7c 85       	ldd	r23, Y+12	; 0x0c
     d02:	8d 85       	ldd	r24, Y+13	; 0x0d
     d04:	9e 85       	ldd	r25, Y+14	; 0x0e
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e2       	ldi	r20, 0x20	; 32
     d0c:	51 e4       	ldi	r21, 0x41	; 65
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
     d26:	0f c0       	rjmp	.+30     	; 0xd46 <CLCD_VidSendCommand+0x200>
     d28:	88 ec       	ldi	r24, 0xC8	; 200
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	9c 83       	std	Y+4, r25	; 0x04
     d2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <CLCD_VidSendCommand+0x1ee>
     d38:	9c 83       	std	Y+4, r25	; 0x04
     d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	8d 81       	ldd	r24, Y+5	; 0x05
     d3e:	9e 81       	ldd	r25, Y+6	; 0x06
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	9e 83       	std	Y+6, r25	; 0x06
     d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	69 f7       	brne	.-38     	; 0xd28 <CLCD_VidSendCommand+0x1e2>
     d4e:	14 c0       	rjmp	.+40     	; 0xd78 <CLCD_VidSendCommand+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	6f 81       	ldd	r22, Y+7	; 0x07
     d52:	78 85       	ldd	r23, Y+8	; 0x08
     d54:	89 85       	ldd	r24, Y+9	; 0x09
     d56:	9a 85       	ldd	r25, Y+10	; 0x0a
     d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	9e 83       	std	Y+6, r25	; 0x06
     d62:	8d 83       	std	Y+5, r24	; 0x05
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	9a 83       	std	Y+2, r25	; 0x02
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <CLCD_VidSendCommand+0x22a>
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
		/**Delay 2ms*/
		_delay_ms(2);
		/*Set Enable as LOW*/
		DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*set RS as LOW to send commend*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,LOW);
	/*Set RW as LOW to write*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,LOW);
	/*Send your commend*/
	for(u8 Local_u8Iterator=0;Local_u8Iterator<2;Local_u8Iterator++)
     d82:	8f 85       	ldd	r24, Y+15	; 0x0f
     d84:	8f 5f       	subi	r24, 0xFF	; 255
     d86:	8f 87       	std	Y+15, r24	; 0x0f
     d88:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8a:	82 30       	cpi	r24, 0x02	; 2
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <CLCD_VidSendCommand+0x24a>
     d8e:	f2 ce       	rjmp	.-540    	; 0xb74 <CLCD_VidSendCommand+0x2e>
		/*Set Enable as LOW*/
		DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
	}

#endif
}
     d90:	62 96       	adiw	r28, 0x12	; 18
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	f8 94       	cli
     d96:	de bf       	out	0x3e, r29	; 62
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	cd bf       	out	0x3d, r28	; 61
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <CLCD_VidSendData>:
void CLCD_VidSendData(u8 Copy_u8Data)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	62 97       	sbiw	r28, 0x12	; 18
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	88 8b       	std	Y+16, r24	; 0x10
	if(CLCD_u8CharPointer == 16 ) CLCD_VidGoToXY(1,0);
     db8:	80 91 80 00 	lds	r24, 0x0080
     dbc:	80 31       	cpi	r24, 0x10	; 16
     dbe:	31 f4       	brne	.+12     	; 0xdcc <CLCD_VidSendData+0x2a>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <CLCD_VidGoToXY>
	if(CLCD_u8CharPointer == 32 )
     dcc:	80 91 80 00 	lds	r24, 0x0080
     dd0:	80 32       	cpi	r24, 0x20	; 32
     dd2:	41 f4       	brne	.+16     	; 0xde4 <CLCD_VidSendData+0x42>
		{
			CLCD_VidGoToXY(0,0);
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <CLCD_VidGoToXY>
			CLCD_u8CharPointer =0;
     de0:	10 92 80 00 	sts	0x0080, r1
		}
	CLCD_u8CharPointer++;
     de4:	80 91 80 00 	lds	r24, 0x0080
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	80 93 80 00 	sts	0x0080, r24
	_delay_ms(2);
	/*Set Enable as LOW*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
#elif CLCD_MODE == CLCD_4BIT
	/*set RS as HIGH to send Data*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,HIGH);
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	41 e0       	ldi	r20, 0x01	; 1
     df4:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*Set RW as LOW to write*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,LOW);
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*Send your Data*/
	for(u8 Local_u8Iterator=0;Local_u8Iterator<2;Local_u8Iterator++)
     e02:	1f 86       	std	Y+15, r1	; 0x0f
     e04:	0a c1       	rjmp	.+532    	; 0x101a <CLCD_VidSendData+0x278>
		{
			switch (Local_u8Iterator)
     e06:	8f 85       	ldd	r24, Y+15	; 0x0f
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3a 8b       	std	Y+18, r19	; 0x12
     e0e:	29 8b       	std	Y+17, r18	; 0x11
     e10:	89 89       	ldd	r24, Y+17	; 0x11
     e12:	9a 89       	ldd	r25, Y+18	; 0x12
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	39 f0       	breq	.+14     	; 0xe26 <CLCD_VidSendData+0x84>
     e18:	29 89       	ldd	r18, Y+17	; 0x11
     e1a:	3a 89       	ldd	r19, Y+18	; 0x12
     e1c:	21 30       	cpi	r18, 0x01	; 1
     e1e:	31 05       	cpc	r19, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <CLCD_VidSendData+0x82>
     e22:	47 c0       	rjmp	.+142    	; 0xeb2 <CLCD_VidSendData+0x110>
     e24:	7b c0       	rjmp	.+246    	; 0xf1c <CLCD_VidSendData+0x17a>
			{
			case 0 :
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB7_PIN,((Copy_u8Data &0b10000000)>>7));
     e26:	88 89       	ldd	r24, Y+16	; 0x10
     e28:	98 2f       	mov	r25, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	99 27       	eor	r25, r25
     e2e:	99 1f       	adc	r25, r25
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	67 e0       	ldi	r22, 0x07	; 7
     e34:	49 2f       	mov	r20, r25
     e36:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB6_PIN,((Copy_u8Data &0b01000000)>>6));
     e3a:	88 89       	ldd	r24, Y+16	; 0x10
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	80 74       	andi	r24, 0x40	; 64
     e42:	90 70       	andi	r25, 0x00	; 0
     e44:	08 2e       	mov	r0, r24
     e46:	89 2f       	mov	r24, r25
     e48:	00 0c       	add	r0, r0
     e4a:	88 1f       	adc	r24, r24
     e4c:	99 0b       	sbc	r25, r25
     e4e:	00 0c       	add	r0, r0
     e50:	88 1f       	adc	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	98 2f       	mov	r25, r24
     e56:	83 e0       	ldi	r24, 0x03	; 3
     e58:	66 e0       	ldi	r22, 0x06	; 6
     e5a:	49 2f       	mov	r20, r25
     e5c:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB5_PIN,((Copy_u8Data &0b00100000)>>5));
     e60:	88 89       	ldd	r24, Y+16	; 0x10
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	80 72       	andi	r24, 0x20	; 32
     e68:	90 70       	andi	r25, 0x00	; 0
     e6a:	95 95       	asr	r25
     e6c:	87 95       	ror	r24
     e6e:	95 95       	asr	r25
     e70:	87 95       	ror	r24
     e72:	95 95       	asr	r25
     e74:	87 95       	ror	r24
     e76:	95 95       	asr	r25
     e78:	87 95       	ror	r24
     e7a:	95 95       	asr	r25
     e7c:	87 95       	ror	r24
     e7e:	98 2f       	mov	r25, r24
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	65 e0       	ldi	r22, 0x05	; 5
     e84:	49 2f       	mov	r20, r25
     e86:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB4_PIN,((Copy_u8Data &0b00010000)>>4));
     e8a:	88 89       	ldd	r24, Y+16	; 0x10
     e8c:	88 2f       	mov	r24, r24
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	80 71       	andi	r24, 0x10	; 16
     e92:	90 70       	andi	r25, 0x00	; 0
     e94:	95 95       	asr	r25
     e96:	87 95       	ror	r24
     e98:	95 95       	asr	r25
     e9a:	87 95       	ror	r24
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	98 2f       	mov	r25, r24
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	64 e0       	ldi	r22, 0x04	; 4
     eaa:	49 2f       	mov	r20, r25
     eac:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
     eb0:	35 c0       	rjmp	.+106    	; 0xf1c <CLCD_VidSendData+0x17a>
				break;
			case 1 :
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB7_PIN,((Copy_u8Data &0b00001000)>>3));
     eb2:	88 89       	ldd	r24, Y+16	; 0x10
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	88 70       	andi	r24, 0x08	; 8
     eba:	90 70       	andi	r25, 0x00	; 0
     ebc:	95 95       	asr	r25
     ebe:	87 95       	ror	r24
     ec0:	95 95       	asr	r25
     ec2:	87 95       	ror	r24
     ec4:	95 95       	asr	r25
     ec6:	87 95       	ror	r24
     ec8:	98 2f       	mov	r25, r24
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	67 e0       	ldi	r22, 0x07	; 7
     ece:	49 2f       	mov	r20, r25
     ed0:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB6_PIN,((Copy_u8Data &0b00000100)>>2));
     ed4:	88 89       	ldd	r24, Y+16	; 0x10
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	84 70       	andi	r24, 0x04	; 4
     edc:	90 70       	andi	r25, 0x00	; 0
     ede:	95 95       	asr	r25
     ee0:	87 95       	ror	r24
     ee2:	95 95       	asr	r25
     ee4:	87 95       	ror	r24
     ee6:	98 2f       	mov	r25, r24
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	66 e0       	ldi	r22, 0x06	; 6
     eec:	49 2f       	mov	r20, r25
     eee:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB5_PIN,((Copy_u8Data &0b00000010)>>1));
     ef2:	88 89       	ldd	r24, Y+16	; 0x10
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	82 70       	andi	r24, 0x02	; 2
     efa:	90 70       	andi	r25, 0x00	; 0
     efc:	95 95       	asr	r25
     efe:	87 95       	ror	r24
     f00:	98 2f       	mov	r25, r24
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	65 e0       	ldi	r22, 0x05	; 5
     f06:	49 2f       	mov	r20, r25
     f08:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB4_PIN,(Copy_u8Data &0b00000001));
     f0c:	88 89       	ldd	r24, Y+16	; 0x10
     f0e:	98 2f       	mov	r25, r24
     f10:	91 70       	andi	r25, 0x01	; 1
     f12:	83 e0       	ldi	r24, 0x03	; 3
     f14:	64 e0       	ldi	r22, 0x04	; 4
     f16:	49 2f       	mov	r20, r25
     f18:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
				break;
			}
			/*Set Enable as HIGH*/
			DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,HIGH);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	41 e0       	ldi	r20, 0x01	; 1
     f22:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e4       	ldi	r27, 0x40	; 64
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ad 87       	std	Y+13, r26	; 0x0d
     f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a ef       	ldi	r20, 0xFA	; 250
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	a9 87       	std	Y+9, r26	; 0x09
     f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <CLCD_VidSendData+0x1d6>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <CLCD_VidSendData+0x254>
	else if (__tmp > 65535)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <CLCD_VidSendData+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <CLCD_VidSendData+0x236>
     fba:	88 ec       	ldi	r24, 0xC8	; 200
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <CLCD_VidSendData+0x224>
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <CLCD_VidSendData+0x218>
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <CLCD_VidSendData+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <CLCD_VidSendData+0x260>
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
			/**Delay 2ms*/
			_delay_ms(2);
			/*Set Enable as LOW*/
			DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
    100a:	82 e0       	ldi	r24, 0x02	; 2
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*set RS as HIGH to send Data*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS_PIN,HIGH);
	/*Set RW as LOW to write*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW_PIN,LOW);
	/*Send your Data*/
	for(u8 Local_u8Iterator=0;Local_u8Iterator<2;Local_u8Iterator++)
    1014:	8f 85       	ldd	r24, Y+15	; 0x0f
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	8f 87       	std	Y+15, r24	; 0x0f
    101a:	8f 85       	ldd	r24, Y+15	; 0x0f
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	08 f4       	brcc	.+2      	; 0x1022 <CLCD_VidSendData+0x280>
    1020:	f2 ce       	rjmp	.-540    	; 0xe06 <CLCD_VidSendData+0x64>
			_delay_ms(2);
			/*Set Enable as LOW*/
			DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
		}
#endif
}
    1022:	62 96       	adiw	r28, 0x12	; 18
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <CLCD_VidInit>:
void CLCD_VidInit(void)
{
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	c6 54       	subi	r28, 0x46	; 70
    1042:	d0 40       	sbci	r29, 0x00	; 0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	fe 01       	movw	r30, r28
    1050:	ed 5b       	subi	r30, 0xBD	; 189
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	a0 e2       	ldi	r26, 0x20	; 32
    105a:	b2 e4       	ldi	r27, 0x42	; 66
    105c:	80 83       	st	Z, r24
    105e:	91 83       	std	Z+1, r25	; 0x01
    1060:	a2 83       	std	Z+2, r26	; 0x02
    1062:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1064:	8e 01       	movw	r16, r28
    1066:	01 5c       	subi	r16, 0xC1	; 193
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	fe 01       	movw	r30, r28
    106c:	ed 5b       	subi	r30, 0xBD	; 189
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	4a ef       	ldi	r20, 0xFA	; 250
    107e:	54 e4       	ldi	r21, 0x44	; 68
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	f8 01       	movw	r30, r16
    108a:	80 83       	st	Z, r24
    108c:	91 83       	std	Z+1, r25	; 0x01
    108e:	a2 83       	std	Z+2, r26	; 0x02
    1090:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1092:	fe 01       	movw	r30, r28
    1094:	ff 96       	adiw	r30, 0x3f	; 63
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e8       	ldi	r20, 0x80	; 128
    10a4:	5f e3       	ldi	r21, 0x3F	; 63
    10a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	2c f4       	brge	.+10     	; 0x10b8 <CLCD_VidInit+0x84>
		__ticks = 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	9e af       	std	Y+62, r25	; 0x3e
    10b4:	8d af       	std	Y+61, r24	; 0x3d
    10b6:	46 c0       	rjmp	.+140    	; 0x1144 <CLCD_VidInit+0x110>
	else if (__tmp > 65535)
    10b8:	fe 01       	movw	r30, r28
    10ba:	ff 96       	adiw	r30, 0x3f	; 63
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	64 f5       	brge	.+88     	; 0x112c <CLCD_VidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d4:	fe 01       	movw	r30, r28
    10d6:	ed 5b       	subi	r30, 0xBD	; 189
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e2       	ldi	r20, 0x20	; 32
    10e8:	51 e4       	ldi	r21, 0x41	; 65
    10ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	bc 01       	movw	r22, r24
    10f4:	cd 01       	movw	r24, r26
    10f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	9e af       	std	Y+62, r25	; 0x3e
    1100:	8d af       	std	Y+61, r24	; 0x3d
    1102:	0f c0       	rjmp	.+30     	; 0x1122 <CLCD_VidInit+0xee>
    1104:	88 ec       	ldi	r24, 0xC8	; 200
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	9c af       	std	Y+60, r25	; 0x3c
    110a:	8b af       	std	Y+59, r24	; 0x3b
    110c:	8b ad       	ldd	r24, Y+59	; 0x3b
    110e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	f1 f7       	brne	.-4      	; 0x1110 <CLCD_VidInit+0xdc>
    1114:	9c af       	std	Y+60, r25	; 0x3c
    1116:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1118:	8d ad       	ldd	r24, Y+61	; 0x3d
    111a:	9e ad       	ldd	r25, Y+62	; 0x3e
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	9e af       	std	Y+62, r25	; 0x3e
    1120:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1122:	8d ad       	ldd	r24, Y+61	; 0x3d
    1124:	9e ad       	ldd	r25, Y+62	; 0x3e
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	69 f7       	brne	.-38     	; 0x1104 <CLCD_VidInit+0xd0>
    112a:	16 c0       	rjmp	.+44     	; 0x1158 <CLCD_VidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    112c:	fe 01       	movw	r30, r28
    112e:	ff 96       	adiw	r30, 0x3f	; 63
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	9e af       	std	Y+62, r25	; 0x3e
    1142:	8d af       	std	Y+61, r24	; 0x3d
    1144:	8d ad       	ldd	r24, Y+61	; 0x3d
    1146:	9e ad       	ldd	r25, Y+62	; 0x3e
    1148:	9a af       	std	Y+58, r25	; 0x3a
    114a:	89 af       	std	Y+57, r24	; 0x39
    114c:	89 ad       	ldd	r24, Y+57	; 0x39
    114e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <CLCD_VidInit+0x11c>
    1154:	9a af       	std	Y+58, r25	; 0x3a
    1156:	89 af       	std	Y+57, r24	; 0x39

#elif CLCD_MODE ==CLCD_4BIT
	/*Wait for more than 30 ms*/
	_delay_ms(40);
	/*Function set command : 2 lines ,5*8 Font size */
	DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB7_PIN,0);
    1158:	83 e0       	ldi	r24, 0x03	; 3
    115a:	67 e0       	ldi	r22, 0x07	; 7
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB6_PIN,0);
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	66 e0       	ldi	r22, 0x06	; 6
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB5_PIN,1);
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	65 e0       	ldi	r22, 0x05	; 5
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	DIO_vidSetPinValue(CLCD_DATA_PORT,CLCD_DB4_PIN,0);
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	64 e0       	ldi	r22, 0x04	; 4
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	/*Set Enable as HIGH*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,HIGH);
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	41 e0       	ldi	r20, 0x01	; 1
    1186:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a0 e0       	ldi	r26, 0x00	; 0
    1190:	b0 e4       	ldi	r27, 0x40	; 64
    1192:	8d ab       	std	Y+53, r24	; 0x35
    1194:	9e ab       	std	Y+54, r25	; 0x36
    1196:	af ab       	std	Y+55, r26	; 0x37
    1198:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    119a:	6d a9       	ldd	r22, Y+53	; 0x35
    119c:	7e a9       	ldd	r23, Y+54	; 0x36
    119e:	8f a9       	ldd	r24, Y+55	; 0x37
    11a0:	98 ad       	ldd	r25, Y+56	; 0x38
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	4a ef       	ldi	r20, 0xFA	; 250
    11a8:	54 e4       	ldi	r21, 0x44	; 68
    11aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ae:	dc 01       	movw	r26, r24
    11b0:	cb 01       	movw	r24, r22
    11b2:	89 ab       	std	Y+49, r24	; 0x31
    11b4:	9a ab       	std	Y+50, r25	; 0x32
    11b6:	ab ab       	std	Y+51, r26	; 0x33
    11b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11ba:	69 a9       	ldd	r22, Y+49	; 0x31
    11bc:	7a a9       	ldd	r23, Y+50	; 0x32
    11be:	8b a9       	ldd	r24, Y+51	; 0x33
    11c0:	9c a9       	ldd	r25, Y+52	; 0x34
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 e8       	ldi	r20, 0x80	; 128
    11c8:	5f e3       	ldi	r21, 0x3F	; 63
    11ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ce:	88 23       	and	r24, r24
    11d0:	2c f4       	brge	.+10     	; 0x11dc <CLCD_VidInit+0x1a8>
		__ticks = 1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	98 ab       	std	Y+48, r25	; 0x30
    11d8:	8f a7       	std	Y+47, r24	; 0x2f
    11da:	3f c0       	rjmp	.+126    	; 0x125a <CLCD_VidInit+0x226>
	else if (__tmp > 65535)
    11dc:	69 a9       	ldd	r22, Y+49	; 0x31
    11de:	7a a9       	ldd	r23, Y+50	; 0x32
    11e0:	8b a9       	ldd	r24, Y+51	; 0x33
    11e2:	9c a9       	ldd	r25, Y+52	; 0x34
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	3f ef       	ldi	r19, 0xFF	; 255
    11e8:	4f e7       	ldi	r20, 0x7F	; 127
    11ea:	57 e4       	ldi	r21, 0x47	; 71
    11ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f0:	18 16       	cp	r1, r24
    11f2:	4c f5       	brge	.+82     	; 0x1246 <CLCD_VidInit+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f4:	6d a9       	ldd	r22, Y+53	; 0x35
    11f6:	7e a9       	ldd	r23, Y+54	; 0x36
    11f8:	8f a9       	ldd	r24, Y+55	; 0x37
    11fa:	98 ad       	ldd	r25, Y+56	; 0x38
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	bc 01       	movw	r22, r24
    120e:	cd 01       	movw	r24, r26
    1210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	98 ab       	std	Y+48, r25	; 0x30
    121a:	8f a7       	std	Y+47, r24	; 0x2f
    121c:	0f c0       	rjmp	.+30     	; 0x123c <CLCD_VidInit+0x208>
    121e:	88 ec       	ldi	r24, 0xC8	; 200
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9e a7       	std	Y+46, r25	; 0x2e
    1224:	8d a7       	std	Y+45, r24	; 0x2d
    1226:	8d a5       	ldd	r24, Y+45	; 0x2d
    1228:	9e a5       	ldd	r25, Y+46	; 0x2e
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	f1 f7       	brne	.-4      	; 0x122a <CLCD_VidInit+0x1f6>
    122e:	9e a7       	std	Y+46, r25	; 0x2e
    1230:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1232:	8f a5       	ldd	r24, Y+47	; 0x2f
    1234:	98 a9       	ldd	r25, Y+48	; 0x30
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	98 ab       	std	Y+48, r25	; 0x30
    123a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123c:	8f a5       	ldd	r24, Y+47	; 0x2f
    123e:	98 a9       	ldd	r25, Y+48	; 0x30
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	69 f7       	brne	.-38     	; 0x121e <CLCD_VidInit+0x1ea>
    1244:	14 c0       	rjmp	.+40     	; 0x126e <CLCD_VidInit+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1246:	69 a9       	ldd	r22, Y+49	; 0x31
    1248:	7a a9       	ldd	r23, Y+50	; 0x32
    124a:	8b a9       	ldd	r24, Y+51	; 0x33
    124c:	9c a9       	ldd	r25, Y+52	; 0x34
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	98 ab       	std	Y+48, r25	; 0x30
    1258:	8f a7       	std	Y+47, r24	; 0x2f
    125a:	8f a5       	ldd	r24, Y+47	; 0x2f
    125c:	98 a9       	ldd	r25, Y+48	; 0x30
    125e:	9c a7       	std	Y+44, r25	; 0x2c
    1260:	8b a7       	std	Y+43, r24	; 0x2b
    1262:	8b a5       	ldd	r24, Y+43	; 0x2b
    1264:	9c a5       	ldd	r25, Y+44	; 0x2c
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <CLCD_VidInit+0x232>
    126a:	9c a7       	std	Y+44, r25	; 0x2c
    126c:	8b a7       	std	Y+43, r24	; 0x2b
	/**Delay 2ms*/
	_delay_ms(2);
	/*Set Enable as LOW*/
	DIO_vidSetPinValue(CLCD_CONTROL_PORT,CLCD_E_PIN,LOW);
    126e:	82 e0       	ldi	r24, 0x02	; 2
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	CLCD_VidSendCommand(0b00101000);
    1278:	88 e2       	ldi	r24, 0x28	; 40
    127a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VidSendCommand>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a0 e8       	ldi	r26, 0x80	; 128
    1284:	bf e3       	ldi	r27, 0x3F	; 63
    1286:	8f a3       	std	Y+39, r24	; 0x27
    1288:	98 a7       	std	Y+40, r25	; 0x28
    128a:	a9 a7       	std	Y+41, r26	; 0x29
    128c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128e:	6f a1       	ldd	r22, Y+39	; 0x27
    1290:	78 a5       	ldd	r23, Y+40	; 0x28
    1292:	89 a5       	ldd	r24, Y+41	; 0x29
    1294:	9a a5       	ldd	r25, Y+42	; 0x2a
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4a ef       	ldi	r20, 0xFA	; 250
    129c:	54 e4       	ldi	r21, 0x44	; 68
    129e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8b a3       	std	Y+35, r24	; 0x23
    12a8:	9c a3       	std	Y+36, r25	; 0x24
    12aa:	ad a3       	std	Y+37, r26	; 0x25
    12ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12ae:	6b a1       	ldd	r22, Y+35	; 0x23
    12b0:	7c a1       	ldd	r23, Y+36	; 0x24
    12b2:	8d a1       	ldd	r24, Y+37	; 0x25
    12b4:	9e a1       	ldd	r25, Y+38	; 0x26
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <CLCD_VidInit+0x29c>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    12ce:	3f c0       	rjmp	.+126    	; 0x134e <CLCD_VidInit+0x31a>
	else if (__tmp > 65535)
    12d0:	6b a1       	ldd	r22, Y+35	; 0x23
    12d2:	7c a1       	ldd	r23, Y+36	; 0x24
    12d4:	8d a1       	ldd	r24, Y+37	; 0x25
    12d6:	9e a1       	ldd	r25, Y+38	; 0x26
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	4f e7       	ldi	r20, 0x7F	; 127
    12de:	57 e4       	ldi	r21, 0x47	; 71
    12e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e4:	18 16       	cp	r1, r24
    12e6:	4c f5       	brge	.+82     	; 0x133a <CLCD_VidInit+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e8:	6f a1       	ldd	r22, Y+39	; 0x27
    12ea:	78 a5       	ldd	r23, Y+40	; 0x28
    12ec:	89 a5       	ldd	r24, Y+41	; 0x29
    12ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e2       	ldi	r20, 0x20	; 32
    12f6:	51 e4       	ldi	r21, 0x41	; 65
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	bc 01       	movw	r22, r24
    1302:	cd 01       	movw	r24, r26
    1304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	9a a3       	std	Y+34, r25	; 0x22
    130e:	89 a3       	std	Y+33, r24	; 0x21
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <CLCD_VidInit+0x2fc>
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	98 a3       	std	Y+32, r25	; 0x20
    1318:	8f 8f       	std	Y+31, r24	; 0x1f
    131a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    131c:	98 a1       	ldd	r25, Y+32	; 0x20
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <CLCD_VidInit+0x2ea>
    1322:	98 a3       	std	Y+32, r25	; 0x20
    1324:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1326:	89 a1       	ldd	r24, Y+33	; 0x21
    1328:	9a a1       	ldd	r25, Y+34	; 0x22
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	9a a3       	std	Y+34, r25	; 0x22
    132e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1330:	89 a1       	ldd	r24, Y+33	; 0x21
    1332:	9a a1       	ldd	r25, Y+34	; 0x22
    1334:	00 97       	sbiw	r24, 0x00	; 0
    1336:	69 f7       	brne	.-38     	; 0x1312 <CLCD_VidInit+0x2de>
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <CLCD_VidInit+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133a:	6b a1       	ldd	r22, Y+35	; 0x23
    133c:	7c a1       	ldd	r23, Y+36	; 0x24
    133e:	8d a1       	ldd	r24, Y+37	; 0x25
    1340:	9e a1       	ldd	r25, Y+38	; 0x26
    1342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	9a a3       	std	Y+34, r25	; 0x22
    134c:	89 a3       	std	Y+33, r24	; 0x21
    134e:	89 a1       	ldd	r24, Y+33	; 0x21
    1350:	9a a1       	ldd	r25, Y+34	; 0x22
    1352:	9e 8f       	std	Y+30, r25	; 0x1e
    1354:	8d 8f       	std	Y+29, r24	; 0x1d
    1356:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1358:	9e 8d       	ldd	r25, Y+30	; 0x1e
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <CLCD_VidInit+0x326>
    135e:	9e 8f       	std	Y+30, r25	; 0x1e
    1360:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display on / off control : display enable ,disable cursor ,no blink cursor */
	CLCD_VidSendCommand(0b00001100);
    1362:	8c e0       	ldi	r24, 0x0C	; 12
    1364:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VidSendCommand>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 e8       	ldi	r26, 0x80	; 128
    136e:	bf e3       	ldi	r27, 0x3F	; 63
    1370:	89 8f       	std	Y+25, r24	; 0x19
    1372:	9a 8f       	std	Y+26, r25	; 0x1a
    1374:	ab 8f       	std	Y+27, r26	; 0x1b
    1376:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	69 8d       	ldd	r22, Y+25	; 0x19
    137a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    137c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a ef       	ldi	r20, 0xFA	; 250
    1386:	54 e4       	ldi	r21, 0x44	; 68
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8d 8b       	std	Y+21, r24	; 0x15
    1392:	9e 8b       	std	Y+22, r25	; 0x16
    1394:	af 8b       	std	Y+23, r26	; 0x17
    1396:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1398:	6d 89       	ldd	r22, Y+21	; 0x15
    139a:	7e 89       	ldd	r23, Y+22	; 0x16
    139c:	8f 89       	ldd	r24, Y+23	; 0x17
    139e:	98 8d       	ldd	r25, Y+24	; 0x18
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <CLCD_VidInit+0x386>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
    13b6:	8b 8b       	std	Y+19, r24	; 0x13
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <CLCD_VidInit+0x404>
	else if (__tmp > 65535)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <CLCD_VidInit+0x3f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <CLCD_VidInit+0x3e6>
    13fc:	88 ec       	ldi	r24, 0xC8	; 200
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9a 8b       	std	Y+18, r25	; 0x12
    1402:	89 8b       	std	Y+17, r24	; 0x11
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	9a 89       	ldd	r25, Y+18	; 0x12
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <CLCD_VidInit+0x3d4>
    140c:	9a 8b       	std	Y+18, r25	; 0x12
    140e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8b 89       	ldd	r24, Y+19	; 0x13
    1412:	9c 89       	ldd	r25, Y+20	; 0x14
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9c 8b       	std	Y+20, r25	; 0x14
    1418:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8b 89       	ldd	r24, Y+19	; 0x13
    141c:	9c 89       	ldd	r25, Y+20	; 0x14
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <CLCD_VidInit+0x3c8>
    1422:	14 c0       	rjmp	.+40     	; 0x144c <CLCD_VidInit+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6d 89       	ldd	r22, Y+21	; 0x15
    1426:	7e 89       	ldd	r23, Y+22	; 0x16
    1428:	8f 89       	ldd	r24, Y+23	; 0x17
    142a:	98 8d       	ldd	r25, Y+24	; 0x18
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9c 8b       	std	Y+20, r25	; 0x14
    1436:	8b 8b       	std	Y+19, r24	; 0x13
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	98 8b       	std	Y+16, r25	; 0x10
    143e:	8f 87       	std	Y+15, r24	; 0x0f
    1440:	8f 85       	ldd	r24, Y+15	; 0x0f
    1442:	98 89       	ldd	r25, Y+16	; 0x10
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <CLCD_VidInit+0x410>
    1448:	98 8b       	std	Y+16, r25	; 0x10
    144a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Clear display*/
	CLCD_VidSendCommand(0b00000001);
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VidSendCommand>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e4       	ldi	r27, 0x40	; 64
    145a:	8b 87       	std	Y+11, r24	; 0x0b
    145c:	9c 87       	std	Y+12, r25	; 0x0c
    145e:	ad 87       	std	Y+13, r26	; 0x0d
    1460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a ef       	ldi	r20, 0xFA	; 250
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	8f 83       	std	Y+7, r24	; 0x07
    147c:	98 87       	std	Y+8, r25	; 0x08
    147e:	a9 87       	std	Y+9, r26	; 0x09
    1480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e8       	ldi	r20, 0x80	; 128
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1496:	88 23       	and	r24, r24
    1498:	2c f4       	brge	.+10     	; 0x14a4 <CLCD_VidInit+0x470>
		__ticks = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
    14a2:	3f c0       	rjmp	.+126    	; 0x1522 <CLCD_VidInit+0x4ee>
	else if (__tmp > 65535)
    14a4:	6f 81       	ldd	r22, Y+7	; 0x07
    14a6:	78 85       	ldd	r23, Y+8	; 0x08
    14a8:	89 85       	ldd	r24, Y+9	; 0x09
    14aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	3f ef       	ldi	r19, 0xFF	; 255
    14b0:	4f e7       	ldi	r20, 0x7F	; 127
    14b2:	57 e4       	ldi	r21, 0x47	; 71
    14b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b8:	18 16       	cp	r1, r24
    14ba:	4c f5       	brge	.+82     	; 0x150e <CLCD_VidInit+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14be:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e2       	ldi	r20, 0x20	; 32
    14ca:	51 e4       	ldi	r21, 0x41	; 65
    14cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	bc 01       	movw	r22, r24
    14d6:	cd 01       	movw	r24, r26
    14d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	0f c0       	rjmp	.+30     	; 0x1504 <CLCD_VidInit+0x4d0>
    14e6:	88 ec       	ldi	r24, 0xC8	; 200
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	9c 83       	std	Y+4, r25	; 0x04
    14ec:	8b 83       	std	Y+3, r24	; 0x03
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	f1 f7       	brne	.-4      	; 0x14f2 <CLCD_VidInit+0x4be>
    14f6:	9c 83       	std	Y+4, r25	; 0x04
    14f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	9e 83       	std	Y+6, r25	; 0x06
    1502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	69 f7       	brne	.-38     	; 0x14e6 <CLCD_VidInit+0x4b2>
    150c:	14 c0       	rjmp	.+40     	; 0x1536 <CLCD_VidInit+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150e:	6f 81       	ldd	r22, Y+7	; 0x07
    1510:	78 85       	ldd	r23, Y+8	; 0x08
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	9a 83       	std	Y+2, r25	; 0x02
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	9a 81       	ldd	r25, Y+2	; 0x02
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <CLCD_VidInit+0x4fa>
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    1536:	ca 5b       	subi	r28, 0xBA	; 186
    1538:	df 4f       	sbci	r29, 0xFF	; 255
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <CLCD_VidSendString>:
void CLCD_VidSendString(const s8*Copy_pcString)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <CLCD_VidSendString+0x6>
    1554:	0f 92       	push	r0
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	9b 83       	std	Y+3, r25	; 0x03
    155c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    155e:	19 82       	std	Y+1, r1	; 0x01
    1560:	0e c0       	rjmp	.+28     	; 0x157e <CLCD_VidSendString+0x30>
	while(Copy_pcString[Local_u8Counter] != '\0')
	{

		CLCD_VidSendData(Copy_pcString[Local_u8Counter]);
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	fc 01       	movw	r30, r24
    156e:	e2 0f       	add	r30, r18
    1570:	f3 1f       	adc	r31, r19
    1572:	80 81       	ld	r24, Z
    1574:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
		Local_u8Counter++;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void CLCD_VidSendString(const s8*Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter] != '\0')
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	fc 01       	movw	r30, r24
    158a:	e2 0f       	add	r30, r18
    158c:	f3 1f       	adc	r31, r19
    158e:	80 81       	ld	r24, Z
    1590:	88 23       	and	r24, r24
    1592:	39 f7       	brne	.-50     	; 0x1562 <CLCD_VidSendString+0x14>
	{

		CLCD_VidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <CLCD_VidGoToXY>:
void CLCD_VidGoToXY(u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <CLCD_VidGoToXY+0x6>
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	8a 83       	std	Y+2, r24	; 0x02
    15ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adrress;
	if(Copy_u8XPos == 0)
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	88 23       	and	r24, r24
    15b4:	19 f4       	brne	.+6      	; 0x15bc <CLCD_VidGoToXY+0x1c>
	{
		/*Location is at first line*/
		Local_u8Adrress =Copy_u8YPos ;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	06 c0       	rjmp	.+12     	; 0x15c8 <CLCD_VidGoToXY+0x28>
	}
	else if(Copy_u8XPos ==1)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	19 f4       	brne	.+6      	; 0x15c8 <CLCD_VidGoToXY+0x28>
	{
		/*Location is at seconed line*/
		Local_u8Adrress =Copy_u8YPos+0x40;
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	80 5c       	subi	r24, 0xC0	; 192
    15c6:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_VidSendCommand(Local_u8Adrress+128);
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	80 58       	subi	r24, 0x80	; 128
    15cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VidSendCommand>
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <CLCD_VidWriteSpecialChar>:
void CLCD_VidWriteSpecialChar(u8* Copy_pu8Pattern,u8 Copy_u8PatternNo,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	27 97       	sbiw	r28, 0x07	; 7
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	6d 83       	std	Y+5, r22	; 0x05
    15f6:	4e 83       	std	Y+6, r20	; 0x06
    15f8:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0,Local_u8Iterator;
    15fa:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRAM Adress whose each block is 8 bytes*/
	Local_u8CGRAMAddress =Copy_u8PatternNo*8;
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	88 0f       	add	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRAM Address command to LCD ,With setting bit 6 ,And clearing bit 7 */
	CLCD_VidSendCommand(Local_u8CGRAMAddress+64);
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	80 5c       	subi	r24, 0xC0	; 192
    1614:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VidSendCommand>
	/*Write the Pattern into CGRAM*/
	for(Local_u8Iterator =0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <CLCD_VidWriteSpecialChar+0x5c>
	{
		CLCD_VidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	fc 01       	movw	r30, r24
    1628:	e2 0f       	add	r30, r18
    162a:	f3 1f       	adc	r31, r19
    162c:	80 81       	ld	r24, Z
    162e:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
	/*Calculate CGRAM Adress whose each block is 8 bytes*/
	Local_u8CGRAMAddress =Copy_u8PatternNo*8;
	/*Send CGRAM Address command to LCD ,With setting bit 6 ,And clearing bit 7 */
	CLCD_VidSendCommand(Local_u8CGRAMAddress+64);
	/*Write the Pattern into CGRAM*/
	for(Local_u8Iterator =0 ; Local_u8Iterator<8 ; Local_u8Iterator++)
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	8f 5f       	subi	r24, 0xFF	; 255
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 30       	cpi	r24, 0x08	; 8
    163c:	78 f3       	brcs	.-34     	; 0x161c <CLCD_VidWriteSpecialChar+0x40>
	{
		CLCD_VidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go back to the DDRAM to display the pattern*/
	CLCD_VidGoToXY(Copy_u8XPos,Copy_u8YPos);
    163e:	8e 81       	ldd	r24, Y+6	; 0x06
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <CLCD_VidGoToXY>
	/*Display the pattern written in the CGRAM*/
	CLCD_VidSendData(Copy_u8PatternNo);
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
}
    164c:	27 96       	adiw	r28, 0x07	; 7
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <CLCD_VidWriteNum>:
void CLCD_VidWriteNum(s32 Copy_s32Number)
{
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	64 97       	sbiw	r28, 0x14	; 20
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	6d 87       	std	Y+13, r22	; 0x0d
    167c:	7e 87       	std	Y+14, r23	; 0x0e
    167e:	8f 87       	std	Y+15, r24	; 0x0f
    1680:	98 8b       	std	Y+16, r25	; 0x10
	s32 Local_s32Variable;
	u32 Local_u32Divider=10;
    1682:	8a e0       	ldi	r24, 0x0A	; 10
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 e0       	ldi	r26, 0x00	; 0
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	af 83       	std	Y+7, r26	; 0x07
    1690:	b8 87       	std	Y+8, r27	; 0x08
	u8 Local_u8Iterator=0,Local_u8Sign=0;
    1692:	1c 82       	std	Y+4, r1	; 0x04
    1694:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_s32Number<0)
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	af 85       	ldd	r26, Y+15	; 0x0f
    169c:	b8 89       	ldd	r27, Y+16	; 0x10
    169e:	bb 23       	and	r27, r27
    16a0:	8c f4       	brge	.+34     	; 0x16c4 <CLCD_VidWriteNum+0x66>
		{
		Local_u8Sign=1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	8b 83       	std	Y+3, r24	; 0x03
		Copy_s32Number*=(-1);
    16a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16aa:	af 85       	ldd	r26, Y+15	; 0x0f
    16ac:	b8 89       	ldd	r27, Y+16	; 0x10
    16ae:	b0 95       	com	r27
    16b0:	a0 95       	com	r26
    16b2:	90 95       	com	r25
    16b4:	81 95       	neg	r24
    16b6:	9f 4f       	sbci	r25, 0xFF	; 255
    16b8:	af 4f       	sbci	r26, 0xFF	; 255
    16ba:	bf 4f       	sbci	r27, 0xFF	; 255
    16bc:	8d 87       	std	Y+13, r24	; 0x0d
    16be:	9e 87       	std	Y+14, r25	; 0x0e
    16c0:	af 87       	std	Y+15, r26	; 0x0f
    16c2:	b8 8b       	std	Y+16, r27	; 0x10
		}
	if(Local_u8Sign==1)CLCD_VidSendData('-');
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	19 f4       	brne	.+6      	; 0x16d0 <CLCD_VidWriteNum+0x72>
    16ca:	8d e2       	ldi	r24, 0x2D	; 45
    16cc:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
	Local_s32Variable =Copy_s32Number;
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	af 85       	ldd	r26, Y+15	; 0x0f
    16d6:	b8 89       	ldd	r27, Y+16	; 0x10
    16d8:	89 87       	std	Y+9, r24	; 0x09
    16da:	9a 87       	std	Y+10, r25	; 0x0a
    16dc:	ab 87       	std	Y+11, r26	; 0x0b
    16de:	bc 87       	std	Y+12, r27	; 0x0c
    16e0:	15 c0       	rjmp	.+42     	; 0x170c <CLCD_VidWriteNum+0xae>
	while(Local_s32Variable != 0)
	{
		Local_s32Variable/=Local_u32Divider;
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	ab 85       	ldd	r26, Y+11	; 0x0b
    16e8:	bc 85       	ldd	r27, Y+12	; 0x0c
    16ea:	2d 81       	ldd	r18, Y+5	; 0x05
    16ec:	3e 81       	ldd	r19, Y+6	; 0x06
    16ee:	4f 81       	ldd	r20, Y+7	; 0x07
    16f0:	58 85       	ldd	r21, Y+8	; 0x08
    16f2:	bc 01       	movw	r22, r24
    16f4:	cd 01       	movw	r24, r26
    16f6:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__udivmodsi4>
    16fa:	da 01       	movw	r26, r20
    16fc:	c9 01       	movw	r24, r18
    16fe:	89 87       	std	Y+9, r24	; 0x09
    1700:	9a 87       	std	Y+10, r25	; 0x0a
    1702:	ab 87       	std	Y+11, r26	; 0x0b
    1704:	bc 87       	std	Y+12, r27	; 0x0c
		Local_u8Iterator++;
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8Sign=1;
		Copy_s32Number*=(-1);
		}
	if(Local_u8Sign==1)CLCD_VidSendData('-');
	Local_s32Variable =Copy_s32Number;
	while(Local_s32Variable != 0)
    170c:	89 85       	ldd	r24, Y+9	; 0x09
    170e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1710:	ab 85       	ldd	r26, Y+11	; 0x0b
    1712:	bc 85       	ldd	r27, Y+12	; 0x0c
    1714:	00 97       	sbiw	r24, 0x00	; 0
    1716:	a1 05       	cpc	r26, r1
    1718:	b1 05       	cpc	r27, r1
    171a:	19 f7       	brne	.-58     	; 0x16e2 <CLCD_VidWriteNum+0x84>
	{
		Local_s32Variable/=Local_u32Divider;
		Local_u8Iterator++;
	}
	for(u8 i=Local_u8Iterator ; i>0 ; i--)
    171c:	8c 81       	ldd	r24, Y+4	; 0x04
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	0d c1       	rjmp	.+538    	; 0x193c <CLCD_VidWriteNum+0x2de>
	{
		Local_s32Variable =Copy_s32Number;
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	af 85       	ldd	r26, Y+15	; 0x0f
    1728:	b8 89       	ldd	r27, Y+16	; 0x10
    172a:	89 87       	std	Y+9, r24	; 0x09
    172c:	9a 87       	std	Y+10, r25	; 0x0a
    172e:	ab 87       	std	Y+11, r26	; 0x0b
    1730:	bc 87       	std	Y+12, r27	; 0x0c
		Local_u32Divider=1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	af 83       	std	Y+7, r26	; 0x07
    1740:	b8 87       	std	Y+8, r27	; 0x08
		for(u8 k=(i-1) ; k>0 ; k--)
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	81 50       	subi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
    1748:	15 c0       	rjmp	.+42     	; 0x1774 <CLCD_VidWriteNum+0x116>
		{
			Local_u32Divider*=10;
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	af 81       	ldd	r26, Y+7	; 0x07
    1750:	b8 85       	ldd	r27, Y+8	; 0x08
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	bc 01       	movw	r22, r24
    175c:	cd 01       	movw	r24, r26
    175e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulsi3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	af 83       	std	Y+7, r26	; 0x07
    176c:	b8 87       	std	Y+8, r27	; 0x08
	}
	for(u8 i=Local_u8Iterator ; i>0 ; i--)
	{
		Local_s32Variable =Copy_s32Number;
		Local_u32Divider=1;
		for(u8 k=(i-1) ; k>0 ; k--)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	81 50       	subi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	88 23       	and	r24, r24
    1778:	41 f7       	brne	.-48     	; 0x174a <CLCD_VidWriteNum+0xec>
		{
			Local_u32Divider*=10;
		}
		Local_s32Variable/=Local_u32Divider;
    177a:	89 85       	ldd	r24, Y+9	; 0x09
    177c:	9a 85       	ldd	r25, Y+10	; 0x0a
    177e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1780:	bc 85       	ldd	r27, Y+12	; 0x0c
    1782:	2d 81       	ldd	r18, Y+5	; 0x05
    1784:	3e 81       	ldd	r19, Y+6	; 0x06
    1786:	4f 81       	ldd	r20, Y+7	; 0x07
    1788:	58 85       	ldd	r21, Y+8	; 0x08
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__udivmodsi4>
    1792:	da 01       	movw	r26, r20
    1794:	c9 01       	movw	r24, r18
    1796:	89 87       	std	Y+9, r24	; 0x09
    1798:	9a 87       	std	Y+10, r25	; 0x0a
    179a:	ab 87       	std	Y+11, r26	; 0x0b
    179c:	bc 87       	std	Y+12, r27	; 0x0c
		Copy_s32Number-=(Local_s32Variable*Local_u32Divider);
    179e:	ed 84       	ldd	r14, Y+13	; 0x0d
    17a0:	fe 84       	ldd	r15, Y+14	; 0x0e
    17a2:	0f 85       	ldd	r16, Y+15	; 0x0f
    17a4:	18 89       	ldd	r17, Y+16	; 0x10
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    17ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    17ae:	2d 81       	ldd	r18, Y+5	; 0x05
    17b0:	3e 81       	ldd	r19, Y+6	; 0x06
    17b2:	4f 81       	ldd	r20, Y+7	; 0x07
    17b4:	58 85       	ldd	r21, Y+8	; 0x08
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__mulsi3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	a8 01       	movw	r20, r16
    17c4:	97 01       	movw	r18, r14
    17c6:	28 1b       	sub	r18, r24
    17c8:	39 0b       	sbc	r19, r25
    17ca:	4a 0b       	sbc	r20, r26
    17cc:	5b 0b       	sbc	r21, r27
    17ce:	da 01       	movw	r26, r20
    17d0:	c9 01       	movw	r24, r18
    17d2:	8d 87       	std	Y+13, r24	; 0x0d
    17d4:	9e 87       	std	Y+14, r25	; 0x0e
    17d6:	af 87       	std	Y+15, r26	; 0x0f
    17d8:	b8 8b       	std	Y+16, r27	; 0x10
		switch (Local_s32Variable)
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	ab 85       	ldd	r26, Y+11	; 0x0b
    17e0:	bc 85       	ldd	r27, Y+12	; 0x0c
    17e2:	89 8b       	std	Y+17, r24	; 0x11
    17e4:	9a 8b       	std	Y+18, r25	; 0x12
    17e6:	ab 8b       	std	Y+19, r26	; 0x13
    17e8:	bc 8b       	std	Y+20, r27	; 0x14
    17ea:	29 89       	ldd	r18, Y+17	; 0x11
    17ec:	3a 89       	ldd	r19, Y+18	; 0x12
    17ee:	4b 89       	ldd	r20, Y+19	; 0x13
    17f0:	5c 89       	ldd	r21, Y+20	; 0x14
    17f2:	24 30       	cpi	r18, 0x04	; 4
    17f4:	31 05       	cpc	r19, r1
    17f6:	41 05       	cpc	r20, r1
    17f8:	51 05       	cpc	r21, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <CLCD_VidWriteNum+0x1a0>
    17fc:	81 c0       	rjmp	.+258    	; 0x1900 <CLCD_VidWriteNum+0x2a2>
    17fe:	89 89       	ldd	r24, Y+17	; 0x11
    1800:	9a 89       	ldd	r25, Y+18	; 0x12
    1802:	ab 89       	ldd	r26, Y+19	; 0x13
    1804:	bc 89       	ldd	r27, Y+20	; 0x14
    1806:	85 30       	cpi	r24, 0x05	; 5
    1808:	91 05       	cpc	r25, r1
    180a:	a1 05       	cpc	r26, r1
    180c:	b1 05       	cpc	r27, r1
    180e:	9c f5       	brge	.+102    	; 0x1876 <CLCD_VidWriteNum+0x218>
    1810:	29 89       	ldd	r18, Y+17	; 0x11
    1812:	3a 89       	ldd	r19, Y+18	; 0x12
    1814:	4b 89       	ldd	r20, Y+19	; 0x13
    1816:	5c 89       	ldd	r21, Y+20	; 0x14
    1818:	21 30       	cpi	r18, 0x01	; 1
    181a:	31 05       	cpc	r19, r1
    181c:	41 05       	cpc	r20, r1
    181e:	51 05       	cpc	r21, r1
    1820:	09 f4       	brne	.+2      	; 0x1824 <CLCD_VidWriteNum+0x1c6>
    1822:	62 c0       	rjmp	.+196    	; 0x18e8 <CLCD_VidWriteNum+0x28a>
    1824:	89 89       	ldd	r24, Y+17	; 0x11
    1826:	9a 89       	ldd	r25, Y+18	; 0x12
    1828:	ab 89       	ldd	r26, Y+19	; 0x13
    182a:	bc 89       	ldd	r27, Y+20	; 0x14
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	91 05       	cpc	r25, r1
    1830:	a1 05       	cpc	r26, r1
    1832:	b1 05       	cpc	r27, r1
    1834:	5c f4       	brge	.+22     	; 0x184c <CLCD_VidWriteNum+0x1ee>
    1836:	29 89       	ldd	r18, Y+17	; 0x11
    1838:	3a 89       	ldd	r19, Y+18	; 0x12
    183a:	4b 89       	ldd	r20, Y+19	; 0x13
    183c:	5c 89       	ldd	r21, Y+20	; 0x14
    183e:	21 15       	cp	r18, r1
    1840:	31 05       	cpc	r19, r1
    1842:	41 05       	cpc	r20, r1
    1844:	51 05       	cpc	r21, r1
    1846:	09 f4       	brne	.+2      	; 0x184a <CLCD_VidWriteNum+0x1ec>
    1848:	73 c0       	rjmp	.+230    	; 0x1930 <CLCD_VidWriteNum+0x2d2>
    184a:	75 c0       	rjmp	.+234    	; 0x1936 <CLCD_VidWriteNum+0x2d8>
    184c:	89 89       	ldd	r24, Y+17	; 0x11
    184e:	9a 89       	ldd	r25, Y+18	; 0x12
    1850:	ab 89       	ldd	r26, Y+19	; 0x13
    1852:	bc 89       	ldd	r27, Y+20	; 0x14
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	91 05       	cpc	r25, r1
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <CLCD_VidWriteNum+0x202>
    185e:	48 c0       	rjmp	.+144    	; 0x18f0 <CLCD_VidWriteNum+0x292>
    1860:	29 89       	ldd	r18, Y+17	; 0x11
    1862:	3a 89       	ldd	r19, Y+18	; 0x12
    1864:	4b 89       	ldd	r20, Y+19	; 0x13
    1866:	5c 89       	ldd	r21, Y+20	; 0x14
    1868:	23 30       	cpi	r18, 0x03	; 3
    186a:	31 05       	cpc	r19, r1
    186c:	41 05       	cpc	r20, r1
    186e:	51 05       	cpc	r21, r1
    1870:	09 f4       	brne	.+2      	; 0x1874 <CLCD_VidWriteNum+0x216>
    1872:	42 c0       	rjmp	.+132    	; 0x18f8 <CLCD_VidWriteNum+0x29a>
    1874:	60 c0       	rjmp	.+192    	; 0x1936 <CLCD_VidWriteNum+0x2d8>
    1876:	89 89       	ldd	r24, Y+17	; 0x11
    1878:	9a 89       	ldd	r25, Y+18	; 0x12
    187a:	ab 89       	ldd	r26, Y+19	; 0x13
    187c:	bc 89       	ldd	r27, Y+20	; 0x14
    187e:	87 30       	cpi	r24, 0x07	; 7
    1880:	91 05       	cpc	r25, r1
    1882:	a1 05       	cpc	r26, r1
    1884:	b1 05       	cpc	r27, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <CLCD_VidWriteNum+0x22c>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <CLCD_VidWriteNum+0x2ba>
    188a:	29 89       	ldd	r18, Y+17	; 0x11
    188c:	3a 89       	ldd	r19, Y+18	; 0x12
    188e:	4b 89       	ldd	r20, Y+19	; 0x13
    1890:	5c 89       	ldd	r21, Y+20	; 0x14
    1892:	28 30       	cpi	r18, 0x08	; 8
    1894:	31 05       	cpc	r19, r1
    1896:	41 05       	cpc	r20, r1
    1898:	51 05       	cpc	r21, r1
    189a:	9c f4       	brge	.+38     	; 0x18c2 <CLCD_VidWriteNum+0x264>
    189c:	89 89       	ldd	r24, Y+17	; 0x11
    189e:	9a 89       	ldd	r25, Y+18	; 0x12
    18a0:	ab 89       	ldd	r26, Y+19	; 0x13
    18a2:	bc 89       	ldd	r27, Y+20	; 0x14
    18a4:	85 30       	cpi	r24, 0x05	; 5
    18a6:	91 05       	cpc	r25, r1
    18a8:	a1 05       	cpc	r26, r1
    18aa:	b1 05       	cpc	r27, r1
    18ac:	69 f1       	breq	.+90     	; 0x1908 <CLCD_VidWriteNum+0x2aa>
    18ae:	29 89       	ldd	r18, Y+17	; 0x11
    18b0:	3a 89       	ldd	r19, Y+18	; 0x12
    18b2:	4b 89       	ldd	r20, Y+19	; 0x13
    18b4:	5c 89       	ldd	r21, Y+20	; 0x14
    18b6:	26 30       	cpi	r18, 0x06	; 6
    18b8:	31 05       	cpc	r19, r1
    18ba:	41 05       	cpc	r20, r1
    18bc:	51 05       	cpc	r21, r1
    18be:	41 f1       	breq	.+80     	; 0x1910 <CLCD_VidWriteNum+0x2b2>
    18c0:	3a c0       	rjmp	.+116    	; 0x1936 <CLCD_VidWriteNum+0x2d8>
    18c2:	89 89       	ldd	r24, Y+17	; 0x11
    18c4:	9a 89       	ldd	r25, Y+18	; 0x12
    18c6:	ab 89       	ldd	r26, Y+19	; 0x13
    18c8:	bc 89       	ldd	r27, Y+20	; 0x14
    18ca:	88 30       	cpi	r24, 0x08	; 8
    18cc:	91 05       	cpc	r25, r1
    18ce:	a1 05       	cpc	r26, r1
    18d0:	b1 05       	cpc	r27, r1
    18d2:	31 f1       	breq	.+76     	; 0x1920 <CLCD_VidWriteNum+0x2c2>
    18d4:	29 89       	ldd	r18, Y+17	; 0x11
    18d6:	3a 89       	ldd	r19, Y+18	; 0x12
    18d8:	4b 89       	ldd	r20, Y+19	; 0x13
    18da:	5c 89       	ldd	r21, Y+20	; 0x14
    18dc:	29 30       	cpi	r18, 0x09	; 9
    18de:	31 05       	cpc	r19, r1
    18e0:	41 05       	cpc	r20, r1
    18e2:	51 05       	cpc	r21, r1
    18e4:	09 f1       	breq	.+66     	; 0x1928 <CLCD_VidWriteNum+0x2ca>
    18e6:	27 c0       	rjmp	.+78     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		{
		case 1 :CLCD_VidSendData('1');break;
    18e8:	81 e3       	ldi	r24, 0x31	; 49
    18ea:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    18ee:	23 c0       	rjmp	.+70     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 2 :CLCD_VidSendData('2');break;
    18f0:	82 e3       	ldi	r24, 0x32	; 50
    18f2:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    18f6:	1f c0       	rjmp	.+62     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 3 :CLCD_VidSendData('3');break;
    18f8:	83 e3       	ldi	r24, 0x33	; 51
    18fa:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    18fe:	1b c0       	rjmp	.+54     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 4 :CLCD_VidSendData('4');break;
    1900:	84 e3       	ldi	r24, 0x34	; 52
    1902:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    1906:	17 c0       	rjmp	.+46     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 5 :CLCD_VidSendData('5');break;
    1908:	85 e3       	ldi	r24, 0x35	; 53
    190a:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    190e:	13 c0       	rjmp	.+38     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 6 :CLCD_VidSendData('6');break;
    1910:	86 e3       	ldi	r24, 0x36	; 54
    1912:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    1916:	0f c0       	rjmp	.+30     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 7 :CLCD_VidSendData('7');break;
    1918:	87 e3       	ldi	r24, 0x37	; 55
    191a:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    191e:	0b c0       	rjmp	.+22     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 8 :CLCD_VidSendData('8');break;
    1920:	88 e3       	ldi	r24, 0x38	; 56
    1922:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    1926:	07 c0       	rjmp	.+14     	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 9 :CLCD_VidSendData('9');break;
    1928:	89 e3       	ldi	r24, 0x39	; 57
    192a:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
    192e:	03 c0       	rjmp	.+6      	; 0x1936 <CLCD_VidWriteNum+0x2d8>
		case 0 :CLCD_VidSendData('0');break;
    1930:	80 e3       	ldi	r24, 0x30	; 48
    1932:	0e 94 d1 06 	call	0xda2	; 0xda2 <CLCD_VidSendData>
	while(Local_s32Variable != 0)
	{
		Local_s32Variable/=Local_u32Divider;
		Local_u8Iterator++;
	}
	for(u8 i=Local_u8Iterator ; i>0 ; i--)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	81 50       	subi	r24, 0x01	; 1
    193a:	8a 83       	std	Y+2, r24	; 0x02
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	88 23       	and	r24, r24
    1940:	09 f0       	breq	.+2      	; 0x1944 <CLCD_VidWriteNum+0x2e6>
    1942:	ef ce       	rjmp	.-546    	; 0x1722 <CLCD_VidWriteNum+0xc4>
		case 9 :CLCD_VidSendData('9');break;
		case 0 :CLCD_VidSendData('0');break;
		}

	}
}
    1944:	64 96       	adiw	r28, 0x14	; 20
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	08 95       	ret

0000195e <DIO_vidSetPinValue>:
#include "BIT_MATH.h"
#include "DIO_register.h"
#include "DIO_interface.h"

void DIO_vidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	27 97       	sbiw	r28, 0x07	; 7
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	6a 83       	std	Y+2, r22	; 0x02
    1976:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == HIGH)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	09 f0       	breq	.+2      	; 0x1980 <DIO_vidSetPinValue+0x22>
    197e:	6f c0       	rjmp	.+222    	; 0x1a5e <DIO_vidSetPinValue+0x100>
		{
		switch(Copy_u8Port){
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3f 83       	std	Y+7, r19	; 0x07
    1988:	2e 83       	std	Y+6, r18	; 0x06
    198a:	8e 81       	ldd	r24, Y+6	; 0x06
    198c:	9f 81       	ldd	r25, Y+7	; 0x07
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	91 05       	cpc	r25, r1
    1992:	49 f1       	breq	.+82     	; 0x19e6 <DIO_vidSetPinValue+0x88>
    1994:	2e 81       	ldd	r18, Y+6	; 0x06
    1996:	3f 81       	ldd	r19, Y+7	; 0x07
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	2c f4       	brge	.+10     	; 0x19a8 <DIO_vidSetPinValue+0x4a>
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	9f 81       	ldd	r25, Y+7	; 0x07
    19a2:	00 97       	sbiw	r24, 0x00	; 0
    19a4:	61 f0       	breq	.+24     	; 0x19be <DIO_vidSetPinValue+0x60>
    19a6:	d2 c0       	rjmp	.+420    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
    19a8:	2e 81       	ldd	r18, Y+6	; 0x06
    19aa:	3f 81       	ldd	r19, Y+7	; 0x07
    19ac:	22 30       	cpi	r18, 0x02	; 2
    19ae:	31 05       	cpc	r19, r1
    19b0:	71 f1       	breq	.+92     	; 0x1a0e <DIO_vidSetPinValue+0xb0>
    19b2:	8e 81       	ldd	r24, Y+6	; 0x06
    19b4:	9f 81       	ldd	r25, Y+7	; 0x07
    19b6:	83 30       	cpi	r24, 0x03	; 3
    19b8:	91 05       	cpc	r25, r1
    19ba:	e9 f1       	breq	.+122    	; 0x1a36 <DIO_vidSetPinValue+0xd8>
    19bc:	c7 c0       	rjmp	.+398    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_A):SET_BIT(PORTA,Copy_u8Pin);break;
    19be:	ab e3       	ldi	r26, 0x3B	; 59
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	eb e3       	ldi	r30, 0x3B	; 59
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <DIO_vidSetPinValue+0x7e>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <DIO_vidSetPinValue+0x7a>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	b3 c0       	rjmp	.+358    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_B):SET_BIT(PORTB,Copy_u8Pin);break;
    19e6:	a8 e3       	ldi	r26, 0x38	; 56
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e8 e3       	ldi	r30, 0x38	; 56
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <DIO_vidSetPinValue+0xa6>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <DIO_vidSetPinValue+0xa2>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	9f c0       	rjmp	.+318    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_C):SET_BIT(PORTC,Copy_u8Pin);break;
    1a0e:	a5 e3       	ldi	r26, 0x35	; 53
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e5 e3       	ldi	r30, 0x35	; 53
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_vidSetPinValue+0xce>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_vidSetPinValue+0xca>
    1a30:	84 2b       	or	r24, r20
    1a32:	8c 93       	st	X, r24
    1a34:	8b c0       	rjmp	.+278    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_D):SET_BIT(PORTD,Copy_u8Pin);break;
    1a36:	a2 e3       	ldi	r26, 0x32	; 50
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e2 e3       	ldi	r30, 0x32	; 50
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	48 2f       	mov	r20, r24
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 2e       	mov	r0, r18
    1a4e:	02 c0       	rjmp	.+4      	; 0x1a54 <DIO_vidSetPinValue+0xf6>
    1a50:	88 0f       	add	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	0a 94       	dec	r0
    1a56:	e2 f7       	brpl	.-8      	; 0x1a50 <DIO_vidSetPinValue+0xf2>
    1a58:	84 2b       	or	r24, r20
    1a5a:	8c 93       	st	X, r24
    1a5c:	77 c0       	rjmp	.+238    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>

		}
		}
		else if (Copy_u8Value == LOW)
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	88 23       	and	r24, r24
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <DIO_vidSetPinValue+0x108>
    1a64:	73 c0       	rjmp	.+230    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
		{
			switch(Copy_u8Port){
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3d 83       	std	Y+5, r19	; 0x05
    1a6e:	2c 83       	std	Y+4, r18	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	59 f1       	breq	.+86     	; 0x1ad0 <DIO_vidSetPinValue+0x172>
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <DIO_vidSetPinValue+0x130>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f0       	breq	.+26     	; 0x1aa6 <DIO_vidSetPinValue+0x148>
    1a8c:	5f c0       	rjmp	.+190    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	89 f1       	breq	.+98     	; 0x1afa <DIO_vidSetPinValue+0x19c>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <DIO_vidSetPinValue+0x146>
    1aa2:	40 c0       	rjmp	.+128    	; 0x1b24 <DIO_vidSetPinValue+0x1c6>
    1aa4:	53 c0       	rjmp	.+166    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_A):CLR_BIT(PORTA,Copy_u8Pin);break;
    1aa6:	ab e3       	ldi	r26, 0x3B	; 59
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	eb e3       	ldi	r30, 0x3B	; 59
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_vidSetPinValue+0x166>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_vidSetPinValue+0x162>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	8c 93       	st	X, r24
    1ace:	3e c0       	rjmp	.+124    	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_B):CLR_BIT(PORTB,Copy_u8Pin);break;
    1ad0:	a8 e3       	ldi	r26, 0x38	; 56
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	e8 e3       	ldi	r30, 0x38	; 56
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_vidSetPinValue+0x190>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_vidSetPinValue+0x18c>
    1af2:	80 95       	com	r24
    1af4:	84 23       	and	r24, r20
    1af6:	8c 93       	st	X, r24
    1af8:	29 c0       	rjmp	.+82     	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_C):CLR_BIT(PORTC,Copy_u8Pin);break;
    1afa:	a5 e3       	ldi	r26, 0x35	; 53
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e5 e3       	ldi	r30, 0x35	; 53
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <DIO_vidSetPinValue+0x1ba>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <DIO_vidSetPinValue+0x1b6>
    1b1c:	80 95       	com	r24
    1b1e:	84 23       	and	r24, r20
    1b20:	8c 93       	st	X, r24
    1b22:	14 c0       	rjmp	.+40     	; 0x1b4c <DIO_vidSetPinValue+0x1ee>
			case(PORT_D):CLR_BIT(PORTD,Copy_u8Pin);break;
    1b24:	a2 e3       	ldi	r26, 0x32	; 50
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e2 e3       	ldi	r30, 0x32	; 50
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 2f       	mov	r20, r24
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	02 2e       	mov	r0, r18
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <DIO_vidSetPinValue+0x1e4>
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <DIO_vidSetPinValue+0x1e0>
    1b46:	80 95       	com	r24
    1b48:	84 23       	and	r24, r20
    1b4a:	8c 93       	st	X, r24
			}
}
}
    1b4c:	27 96       	adiw	r28, 0x07	; 7
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <DIO_u8GetPinValue+0x6>
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <DIO_u8GetPinValue+0x8>
    1b66:	0f 92       	push	r0
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	8a 83       	std	Y+2, r24	; 0x02
    1b6e:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8ReVal ;
	switch(Copy_u8Port)
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	3d 83       	std	Y+5, r19	; 0x05
    1b78:	2c 83       	std	Y+4, r18	; 0x04
    1b7a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b7c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b7e:	41 30       	cpi	r20, 0x01	; 1
    1b80:	51 05       	cpc	r21, r1
    1b82:	41 f1       	breq	.+80     	; 0x1bd4 <DIO_u8GetPinValue+0x76>
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	9d 81       	ldd	r25, Y+5	; 0x05
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	34 f4       	brge	.+12     	; 0x1b9a <DIO_u8GetPinValue+0x3c>
    1b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b90:	3d 81       	ldd	r19, Y+5	; 0x05
    1b92:	21 15       	cp	r18, r1
    1b94:	31 05       	cpc	r19, r1
    1b96:	61 f0       	breq	.+24     	; 0x1bb0 <DIO_u8GetPinValue+0x52>
    1b98:	52 c0       	rjmp	.+164    	; 0x1c3e <DIO_u8GetPinValue+0xe0>
    1b9a:	4c 81       	ldd	r20, Y+4	; 0x04
    1b9c:	5d 81       	ldd	r21, Y+5	; 0x05
    1b9e:	42 30       	cpi	r20, 0x02	; 2
    1ba0:	51 05       	cpc	r21, r1
    1ba2:	51 f1       	breq	.+84     	; 0x1bf8 <DIO_u8GetPinValue+0x9a>
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	b9 f1       	breq	.+110    	; 0x1c1c <DIO_u8GetPinValue+0xbe>
    1bae:	47 c0       	rjmp	.+142    	; 0x1c3e <DIO_u8GetPinValue+0xe0>
	{
		case(PORT_A):u8ReVal = GET_BIT(PINA,Copy_u8Pin);break;
    1bb0:	e9 e3       	ldi	r30, 0x39	; 57
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a9 01       	movw	r20, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_u8GetPinValue+0x6a>
    1bc4:	55 95       	asr	r21
    1bc6:	47 95       	ror	r20
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_u8GetPinValue+0x66>
    1bcc:	ca 01       	movw	r24, r20
    1bce:	81 70       	andi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	35 c0       	rjmp	.+106    	; 0x1c3e <DIO_u8GetPinValue+0xe0>
		case(PORT_B):u8ReVal = GET_BIT(PINB,Copy_u8Pin);break;
    1bd4:	e6 e3       	ldi	r30, 0x36	; 54
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a9 01       	movw	r20, r18
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_u8GetPinValue+0x8e>
    1be8:	55 95       	asr	r21
    1bea:	47 95       	ror	r20
    1bec:	8a 95       	dec	r24
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <DIO_u8GetPinValue+0x8a>
    1bf0:	ca 01       	movw	r24, r20
    1bf2:	81 70       	andi	r24, 0x01	; 1
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	23 c0       	rjmp	.+70     	; 0x1c3e <DIO_u8GetPinValue+0xe0>
		case(PORT_C):u8ReVal = GET_BIT(PINC,Copy_u8Pin);break;
    1bf8:	e3 e3       	ldi	r30, 0x33	; 51
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a9 01       	movw	r20, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <DIO_u8GetPinValue+0xb2>
    1c0c:	55 95       	asr	r21
    1c0e:	47 95       	ror	r20
    1c10:	8a 95       	dec	r24
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <DIO_u8GetPinValue+0xae>
    1c14:	ca 01       	movw	r24, r20
    1c16:	81 70       	andi	r24, 0x01	; 1
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	11 c0       	rjmp	.+34     	; 0x1c3e <DIO_u8GetPinValue+0xe0>
		case(PORT_D):u8ReVal = GET_BIT(PIND,Copy_u8Pin);break;
    1c1c:	e0 e3       	ldi	r30, 0x30	; 48
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <DIO_u8GetPinValue+0xd6>
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	8a 95       	dec	r24
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <DIO_u8GetPinValue+0xd2>
    1c38:	ca 01       	movw	r24, r20
    1c3a:	81 70       	andi	r24, 0x01	; 1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	 }
    return u8ReVal;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <DIO_vidSetPortValue>:
void DIO_vidSetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <DIO_vidSetPortValue+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <DIO_vidSetPortValue+0x8>
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	6a 83       	std	Y+2, r22	; 0x02
		switch(Copy_u8Port)
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3c 83       	std	Y+4, r19	; 0x04
    1c68:	2b 83       	std	Y+3, r18	; 0x03
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	91 05       	cpc	r25, r1
    1c72:	d1 f0       	breq	.+52     	; 0x1ca8 <DIO_vidSetPortValue+0x58>
    1c74:	2b 81       	ldd	r18, Y+3	; 0x03
    1c76:	3c 81       	ldd	r19, Y+4	; 0x04
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	2c f4       	brge	.+10     	; 0x1c88 <DIO_vidSetPortValue+0x38>
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	9c 81       	ldd	r25, Y+4	; 0x04
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	61 f0       	breq	.+24     	; 0x1c9e <DIO_vidSetPortValue+0x4e>
    1c86:	1e c0       	rjmp	.+60     	; 0x1cc4 <DIO_vidSetPortValue+0x74>
    1c88:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8c:	22 30       	cpi	r18, 0x02	; 2
    1c8e:	31 05       	cpc	r19, r1
    1c90:	81 f0       	breq	.+32     	; 0x1cb2 <DIO_vidSetPortValue+0x62>
    1c92:	8b 81       	ldd	r24, Y+3	; 0x03
    1c94:	9c 81       	ldd	r25, Y+4	; 0x04
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	91 05       	cpc	r25, r1
    1c9a:	81 f0       	breq	.+32     	; 0x1cbc <DIO_vidSetPortValue+0x6c>
    1c9c:	13 c0       	rjmp	.+38     	; 0x1cc4 <DIO_vidSetPortValue+0x74>
		{
			case(PORT_A):PORTA=Copy_u8Value;break;
    1c9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	80 83       	st	Z, r24
    1ca6:	0e c0       	rjmp	.+28     	; 0x1cc4 <DIO_vidSetPortValue+0x74>
			case(PORT_B):PORTB=Copy_u8Value;break;
    1ca8:	e8 e3       	ldi	r30, 0x38	; 56
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	80 83       	st	Z, r24
    1cb0:	09 c0       	rjmp	.+18     	; 0x1cc4 <DIO_vidSetPortValue+0x74>
			case(PORT_C):PORTC=Copy_u8Value;break;
    1cb2:	e5 e3       	ldi	r30, 0x35	; 53
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	80 83       	st	Z, r24
    1cba:	04 c0       	rjmp	.+8      	; 0x1cc4 <DIO_vidSetPortValue+0x74>
			case(PORT_D):PORTD=Copy_u8Value;break;
    1cbc:	e2 e3       	ldi	r30, 0x32	; 50
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	80 83       	st	Z, r24
		}
}
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <DIO_vidGetPortValue>:
void DIO_vidGetPortValue(u8 Copy_u8Port,u8 *Copy_u8Value)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <DIO_vidGetPortValue+0x6>
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <DIO_vidGetPortValue+0x8>
    1cda:	0f 92       	push	r0
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	7b 83       	std	Y+3, r23	; 0x03
    1ce4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3d 83       	std	Y+5, r19	; 0x05
    1cee:	2c 83       	std	Y+4, r18	; 0x04
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	81 30       	cpi	r24, 0x01	; 1
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	e1 f0       	breq	.+56     	; 0x1d32 <DIO_vidGetPortValue+0x60>
    1cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfe:	22 30       	cpi	r18, 0x02	; 2
    1d00:	31 05       	cpc	r19, r1
    1d02:	2c f4       	brge	.+10     	; 0x1d0e <DIO_vidGetPortValue+0x3c>
    1d04:	8c 81       	ldd	r24, Y+4	; 0x04
    1d06:	9d 81       	ldd	r25, Y+5	; 0x05
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <DIO_vidGetPortValue+0x52>
    1d0c:	26 c0       	rjmp	.+76     	; 0x1d5a <DIO_vidGetPortValue+0x88>
    1d0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d10:	3d 81       	ldd	r19, Y+5	; 0x05
    1d12:	22 30       	cpi	r18, 0x02	; 2
    1d14:	31 05       	cpc	r19, r1
    1d16:	a1 f0       	breq	.+40     	; 0x1d40 <DIO_vidGetPortValue+0x6e>
    1d18:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1c:	83 30       	cpi	r24, 0x03	; 3
    1d1e:	91 05       	cpc	r25, r1
    1d20:	b1 f0       	breq	.+44     	; 0x1d4e <DIO_vidGetPortValue+0x7c>
    1d22:	1b c0       	rjmp	.+54     	; 0x1d5a <DIO_vidGetPortValue+0x88>
	{
		case(PORT_A):*Copy_u8Value =PINA;break;
    1d24:	e9 e3       	ldi	r30, 0x39	; 57
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2e:	80 83       	st	Z, r24
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <DIO_vidGetPortValue+0x88>
		case(PORT_B):*Copy_u8Value =PINB;break;
    1d32:	e6 e3       	ldi	r30, 0x36	; 54
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d3c:	80 83       	st	Z, r24
    1d3e:	0d c0       	rjmp	.+26     	; 0x1d5a <DIO_vidGetPortValue+0x88>
		case(PORT_C):*Copy_u8Value =PINC;break;
    1d40:	e3 e3       	ldi	r30, 0x33	; 51
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	ea 81       	ldd	r30, Y+2	; 0x02
    1d48:	fb 81       	ldd	r31, Y+3	; 0x03
    1d4a:	80 83       	st	Z, r24
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <DIO_vidGetPortValue+0x88>
		case(PORT_D):*Copy_u8Value =PIND;break;
    1d4e:	e0 e3       	ldi	r30, 0x30	; 48
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	ea 81       	ldd	r30, Y+2	; 0x02
    1d56:	fb 81       	ldd	r31, Y+3	; 0x03
    1d58:	80 83       	st	Z, r24
     }
}
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_interface.h"
#include "KPD_private.h"

u8 KPD_u8GetPressedKey(void)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <KPD_u8GetPressedKey+0x6>
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <KPD_u8GetPressedKey+0x8>
    1d72:	0f 92       	push	r0
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8KPDState;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	8c 83       	std	Y+4, r24	; 0x04
	static u8 Local_u8KPDArr[4][4]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUM_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRawArr   [ROW_NUM]  ={KPD_RAW0_PIN,KPD_RAW1_PIN,KPD_RAW2_PIN,KPD_RAW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUM_NUM;Local_u8ColumnIdx++)
    1d7c:	1b 82       	std	Y+3, r1	; 0x03
    1d7e:	57 c0       	rjmp	.+174    	; 0x1e2e <KPD_u8GetPressedKey+0xc4>
	{
		/*Activate current Column*/
		DIO_vidSetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],LOW);
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	fc 01       	movw	r30, r24
    1d88:	e4 59       	subi	r30, 0x94	; 148
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	90 81       	ld	r25, Z
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	69 2f       	mov	r22, r25
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1d98:	1a 82       	std	Y+2, r1	; 0x02
    1d9a:	37 c0       	rjmp	.+110    	; 0x1e0a <KPD_u8GetPressedKey+0xa0>
		{
			/*Read the current Row*/
			Local_u8KPDState=DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRawArr[Local_u8RowIdx]);
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	fc 01       	movw	r30, r24
    1da4:	e8 59       	subi	r30, 0x98	; 152
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	90 81       	ld	r25, Z
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	69 2f       	mov	r22, r25
    1dae:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_u8GetPinValue>
    1db2:	89 83       	std	Y+1, r24	; 0x01
			/*check if switch is pressed*/
			if (LOW  == Local_u8KPDState)
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	88 23       	and	r24, r24
    1db8:	29 f5       	brne	.+74     	; 0x1e04 <KPD_u8GetPressedKey+0x9a>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	ca 01       	movw	r24, r20
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	82 0f       	add	r24, r18
    1dd2:	93 1f       	adc	r25, r19
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	e0 59       	subi	r30, 0x90	; 144
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	8c 83       	std	Y+4, r24	; 0x04
    1dde:	0c c0       	rjmp	.+24     	; 0x1df8 <KPD_u8GetPressedKey+0x8e>
				/*Polling (busy waiting) until the key is released*/
				while(LOW  == Local_u8KPDState)
				{
					Local_u8KPDState=DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRawArr[Local_u8RowIdx]);
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	fc 01       	movw	r30, r24
    1de8:	e8 59       	subi	r30, 0x98	; 152
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	90 81       	ld	r25, Z
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	69 2f       	mov	r22, r25
    1df2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <DIO_u8GetPinValue>
    1df6:	89 83       	std	Y+1, r24	; 0x01
			/*check if switch is pressed*/
			if (LOW  == Local_u8KPDState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				/*Polling (busy waiting) until the key is released*/
				while(LOW  == Local_u8KPDState)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	88 23       	and	r24, r24
    1dfc:	89 f3       	breq	.-30     	; 0x1de0 <KPD_u8GetPressedKey+0x76>
				{
					Local_u8KPDState=DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRawArr[Local_u8RowIdx]);
				}
				return Local_u8PressedKey;
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	8d 83       	std	Y+5, r24	; 0x05
    1e02:	1b c0       	rjmp	.+54     	; 0x1e3a <KPD_u8GetPressedKey+0xd0>

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUM_NUM;Local_u8ColumnIdx++)
	{
		/*Activate current Column*/
		DIO_vidSetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],LOW);
		for(Local_u8RowIdx=0;Local_u8RowIdx<ROW_NUM;Local_u8RowIdx++)
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	8a 83       	std	Y+2, r24	; 0x02
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	84 30       	cpi	r24, 0x04	; 4
    1e0e:	30 f2       	brcs	.-116    	; 0x1d9c <KPD_u8GetPressedKey+0x32>
				}
				return Local_u8PressedKey;
			}
		}
		/*Deactivate current Column*/
		DIO_vidSetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],HIGH);
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	88 2f       	mov	r24, r24
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	fc 01       	movw	r30, r24
    1e18:	e4 59       	subi	r30, 0x94	; 148
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	90 81       	ld	r25, Z
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	69 2f       	mov	r22, r25
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_vidSetPinValue>
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIdx,Local_u8RowIdx,Local_u8KPDState;
	static u8 Local_u8KPDArr[4][4]=KPD_ARR_VAL;
	static u8 Local_u8KPDColumnArr[COLUM_NUM]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRawArr   [ROW_NUM]  ={KPD_RAW0_PIN,KPD_RAW1_PIN,KPD_RAW2_PIN,KPD_RAW3_PIN};

	for(Local_u8ColumnIdx=0;Local_u8ColumnIdx<COLUM_NUM;Local_u8ColumnIdx++)
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	8f 5f       	subi	r24, 0xFF	; 255
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	08 f4       	brcc	.+2      	; 0x1e36 <KPD_u8GetPressedKey+0xcc>
    1e34:	a5 cf       	rjmp	.-182    	; 0x1d80 <KPD_u8GetPressedKey+0x16>
			}
		}
		/*Deactivate current Column*/
		DIO_vidSetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIdx],HIGH);
	}
	return Local_u8PressedKey;
    1e36:	8c 81       	ldd	r24, Y+4	; 0x04
    1e38:	8d 83       	std	Y+5, r24	; 0x05
    1e3a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <PORT_VidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_register.h"

void PORT_VidInit(void)
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
	DDRA =PORTA_DIR;
    1e54:	ea e3       	ldi	r30, 0x3A	; 58
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8f e0       	ldi	r24, 0x0F	; 15
    1e5a:	80 83       	st	Z, r24
	DDRB =PORTB_DIR;
    1e5c:	e7 e3       	ldi	r30, 0x37	; 55
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	8f e0       	ldi	r24, 0x0F	; 15
    1e62:	80 83       	st	Z, r24
	DDRC =PORTC_DIR;
    1e64:	e4 e3       	ldi	r30, 0x34	; 52
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	87 e0       	ldi	r24, 0x07	; 7
    1e6a:	80 83       	st	Z, r24
	DDRD =PORTD_DIR;
    1e6c:	e1 e3       	ldi	r30, 0x31	; 49
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	80 83       	st	Z, r24
	
	PORTA = PORTA_INTIAL_VALUE;
    1e74:	eb e3       	ldi	r30, 0x3B	; 59
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	8f ef       	ldi	r24, 0xFF	; 255
    1e7a:	80 83       	st	Z, r24
	PORTB = PORTA_INTIAL_VALUE;
    1e7c:	e8 e3       	ldi	r30, 0x38	; 56
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	80 83       	st	Z, r24
	PORTC = PORTA_INTIAL_VALUE;
    1e84:	e5 e3       	ldi	r30, 0x35	; 53
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	80 83       	st	Z, r24
	PORTD = PORTA_INTIAL_VALUE;
    1e8c:	e2 e3       	ldi	r30, 0x32	; 50
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	80 83       	st	Z, r24

}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <main>:
#include "KPD_interface.h"

#include "util/delay.h"

void main ()
{
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey;
	PORT_VidInit();
    1ea4:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <PORT_VidInit>
	CLCD_VidInit();
    1ea8:	0e 94 1a 08 	call	0x1034	; 0x1034 <CLCD_VidInit>
	CLCD_VidSendCommand(CLCD_CLEAR_DISPLAY);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_VidSendCommand>

	while(1)
	{
		do
		{
			Local_u8PressedKey=KPD_u8GetPressedKey();
    1eb2:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <KPD_u8GetPressedKey>
    1eb6:	89 83       	std	Y+1, r24	; 0x01
		}while(0xff==Local_u8PressedKey);
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	8f 3f       	cpi	r24, 0xFF	; 255
    1ebc:	d1 f3       	breq	.-12     	; 0x1eb2 <main+0x18>
		CLCD_VidWriteNum(Local_u8PressedKey);
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e0       	ldi	r26, 0x00	; 0
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 2f 0b 	call	0x165e	; 0x165e <CLCD_VidWriteNum>
    1ed0:	f0 cf       	rjmp	.-32     	; 0x1eb2 <main+0x18>

00001ed2 <__mulsi3>:
    1ed2:	62 9f       	mul	r22, r18
    1ed4:	d0 01       	movw	r26, r0
    1ed6:	73 9f       	mul	r23, r19
    1ed8:	f0 01       	movw	r30, r0
    1eda:	82 9f       	mul	r24, r18
    1edc:	e0 0d       	add	r30, r0
    1ede:	f1 1d       	adc	r31, r1
    1ee0:	64 9f       	mul	r22, r20
    1ee2:	e0 0d       	add	r30, r0
    1ee4:	f1 1d       	adc	r31, r1
    1ee6:	92 9f       	mul	r25, r18
    1ee8:	f0 0d       	add	r31, r0
    1eea:	83 9f       	mul	r24, r19
    1eec:	f0 0d       	add	r31, r0
    1eee:	74 9f       	mul	r23, r20
    1ef0:	f0 0d       	add	r31, r0
    1ef2:	65 9f       	mul	r22, r21
    1ef4:	f0 0d       	add	r31, r0
    1ef6:	99 27       	eor	r25, r25
    1ef8:	72 9f       	mul	r23, r18
    1efa:	b0 0d       	add	r27, r0
    1efc:	e1 1d       	adc	r30, r1
    1efe:	f9 1f       	adc	r31, r25
    1f00:	63 9f       	mul	r22, r19
    1f02:	b0 0d       	add	r27, r0
    1f04:	e1 1d       	adc	r30, r1
    1f06:	f9 1f       	adc	r31, r25
    1f08:	bd 01       	movw	r22, r26
    1f0a:	cf 01       	movw	r24, r30
    1f0c:	11 24       	eor	r1, r1
    1f0e:	08 95       	ret

00001f10 <__udivmodsi4>:
    1f10:	a1 e2       	ldi	r26, 0x21	; 33
    1f12:	1a 2e       	mov	r1, r26
    1f14:	aa 1b       	sub	r26, r26
    1f16:	bb 1b       	sub	r27, r27
    1f18:	fd 01       	movw	r30, r26
    1f1a:	0d c0       	rjmp	.+26     	; 0x1f36 <__udivmodsi4_ep>

00001f1c <__udivmodsi4_loop>:
    1f1c:	aa 1f       	adc	r26, r26
    1f1e:	bb 1f       	adc	r27, r27
    1f20:	ee 1f       	adc	r30, r30
    1f22:	ff 1f       	adc	r31, r31
    1f24:	a2 17       	cp	r26, r18
    1f26:	b3 07       	cpc	r27, r19
    1f28:	e4 07       	cpc	r30, r20
    1f2a:	f5 07       	cpc	r31, r21
    1f2c:	20 f0       	brcs	.+8      	; 0x1f36 <__udivmodsi4_ep>
    1f2e:	a2 1b       	sub	r26, r18
    1f30:	b3 0b       	sbc	r27, r19
    1f32:	e4 0b       	sbc	r30, r20
    1f34:	f5 0b       	sbc	r31, r21

00001f36 <__udivmodsi4_ep>:
    1f36:	66 1f       	adc	r22, r22
    1f38:	77 1f       	adc	r23, r23
    1f3a:	88 1f       	adc	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	1a 94       	dec	r1
    1f40:	69 f7       	brne	.-38     	; 0x1f1c <__udivmodsi4_loop>
    1f42:	60 95       	com	r22
    1f44:	70 95       	com	r23
    1f46:	80 95       	com	r24
    1f48:	90 95       	com	r25
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	bd 01       	movw	r22, r26
    1f50:	cf 01       	movw	r24, r30
    1f52:	08 95       	ret

00001f54 <__prologue_saves__>:
    1f54:	2f 92       	push	r2
    1f56:	3f 92       	push	r3
    1f58:	4f 92       	push	r4
    1f5a:	5f 92       	push	r5
    1f5c:	6f 92       	push	r6
    1f5e:	7f 92       	push	r7
    1f60:	8f 92       	push	r8
    1f62:	9f 92       	push	r9
    1f64:	af 92       	push	r10
    1f66:	bf 92       	push	r11
    1f68:	cf 92       	push	r12
    1f6a:	df 92       	push	r13
    1f6c:	ef 92       	push	r14
    1f6e:	ff 92       	push	r15
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	ca 1b       	sub	r28, r26
    1f7e:	db 0b       	sbc	r29, r27
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	09 94       	ijmp

00001f8c <__epilogue_restores__>:
    1f8c:	2a 88       	ldd	r2, Y+18	; 0x12
    1f8e:	39 88       	ldd	r3, Y+17	; 0x11
    1f90:	48 88       	ldd	r4, Y+16	; 0x10
    1f92:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f94:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f96:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f98:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f9e:	b9 84       	ldd	r11, Y+9	; 0x09
    1fa0:	c8 84       	ldd	r12, Y+8	; 0x08
    1fa2:	df 80       	ldd	r13, Y+7	; 0x07
    1fa4:	ee 80       	ldd	r14, Y+6	; 0x06
    1fa6:	fd 80       	ldd	r15, Y+5	; 0x05
    1fa8:	0c 81       	ldd	r16, Y+4	; 0x04
    1faa:	1b 81       	ldd	r17, Y+3	; 0x03
    1fac:	aa 81       	ldd	r26, Y+2	; 0x02
    1fae:	b9 81       	ldd	r27, Y+1	; 0x01
    1fb0:	ce 0f       	add	r28, r30
    1fb2:	d1 1d       	adc	r29, r1
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	ed 01       	movw	r28, r26
    1fc0:	08 95       	ret

00001fc2 <_exit>:
    1fc2:	f8 94       	cli

00001fc4 <__stop_program>:
    1fc4:	ff cf       	rjmp	.-2      	; 0x1fc4 <__stop_program>
